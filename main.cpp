
// PURPOSE: Lexically analyze inputted statements 
// IMPLEMENTED BY: Justin Butler
// Course:CS 351 
// INSTRUCTOR: Dr. Shaun-inn Wu 
// LAB SESSION: Monday, Wednesday 4:00-5:15pm 
// DATE: 9/28/2021
// INPUT: The input comes from a file named parse.in which contains a mathematical //statement that the program parses 
// OUTPUT: The program outputs all elements it parses into the console.
// For more sophisticated program, include the following: 
// ALGORITHM: Main calls the lexical analyzer and outputs the parse 
// OVERVIEW OF SUBPARTS: if the program consists of several
// lex() : Lexically analyzes the next token and lexeme
// addChar() : adds a char into the lexme
// getChar() : gets next char (checks type of char too)
// lookup() : returns if char is an acceptable symbol or error.
// getNonBlank() : a function to call getChar until it returns a non-whitespace character
//  error() : it displays an error.
//  term(): parses terms
//  factor(): parses factors
//  expr(): parses expression*/

#include <stdio.h>

#include <ctype.h>

#include <string>

using namespace std;
/* Global declarations */
/* Variables */
int charClass;
char lexeme[100];
char nextChar;
int lexLen;
int token;
int nextToken;
bool isPrinted = false;
bool isPrinted2 = false;
FILE * in_fp, * fopen();
/* Function declarations */
void addChar();
void getChar();
void getNonBlank();
int lex();
void expr();
void term();
void error();
void factor();
//void ifstmt(); book did not provide us with the statement func >:(
/* Character classes */
#define LETTER 0
#define DIGIT 1
#define UNKNOWN 99
/* Token codes */
#define INT_LIT 10
#define IDENT 11
#define ASSIGN_OP 20
#define ADD_OP 21
#define SUB_OP 22
#define MULT_OP 23
#define DIV_OP 24
#define LEFT_PAREN 25
#define RIGHT_PAREN 26
/* main*/
int main() {
  /* Open the input data file and process its contents */
  if ((in_fp = fopen("parse.in", "r")) == NULL)
    printf("ERROR - cannot open input file \n");
  else {
    getChar();
    do {
      lex();
      if (nextToken == LEFT_PAREN || nextToken == ADD_OP || nextToken == RIGHT_PAREN) {
        expr();
        term();
        factor();
      }

    } while (nextToken != EOF);
  }

}
/* PURPOSE: Looks up operator, parenthesis etc and returns token values. */
/* RATIONALE: we need to do lookups in multiple functions it doesnt make sense to repeat this code*/
/* INPUT PARAMETERS: ch, a char to look up*/
/* OUTPUT PARAMETERS: token val*/
int lookup(char ch) {
  switch (ch) {
  case '(':
    addChar();
    nextToken = LEFT_PAREN;
    break;
  case ')':
    addChar();
    nextToken = RIGHT_PAREN;
    break;
  case '+':
    addChar();
    nextToken = ADD_OP;
    break;
  case '-':
    addChar();
    nextToken = SUB_OP;
    break;
  case '*':
    addChar();
    nextToken = MULT_OP;
    break;
  case '/':
    addChar();
    nextToken = DIV_OP;
    break;
  default:
    addChar();
    nextToken = EOF;
    break;
  }
  return nextToken;
}
/* PURPOSE: Adds a char to the lexeme */
void addChar() {
  if (lexLen <= 98) {
    lexeme[lexLen++] = nextChar;
    lexeme[lexLen] = 0;
  } else
    printf("Error - lexeme is too long \n");
}
/* PURPOSE: a function to get the next character ofinput and determine its character class*/
void getChar() {
  if ((nextChar = getc(in_fp)) != EOF) {
    if (isalpha(nextChar))
      charClass = LETTER;
    else if (isdigit(nextChar))
      charClass = DIGIT;
    else charClass = UNKNOWN;
  } else
    charClass = EOF;
}
/* getNonBlank - a function to call getChar until it
returns a non-whitespace character */
void getNonBlank() {
  while (isspace(nextChar))
    getChar();
}
// expr
//Parses strings in the language generated by the rule:
//<expr> -> <term> {(+ | -) <term>}
/* PURPOSE: Parses a string in the language generated by semantic rules. */
/* RATIONALE: <expr> -> <term> {(+ | -) <term>}*/
/* INPUT PARAMETERS: a expr*/
/* OUTPUT PARAMETERS: token val*/
void expr() {
  if (nextToken != EOF)
    printf("Enter <expr>\n");
  // Parse the first term 
  term();
  /* As long as the next token is + or -, get
  the next token and parse the next term */
  while (nextToken == ADD_OP || nextToken == SUB_OP) {
    lex();
    term();
  }
  printf("Exit <expr>\n");
}
/* PURPOSE: Parses a string in the language generated by semantic rules. */
/* RATIONALE: <term> -> <factor> {(* | /) <factor>)*/
/* INPUT PARAMETERS: a term
/* OUTPUT PARAMETERS: token val*/
void term() {
  if (nextToken != EOF)
    printf("Enter <term>\n");
  /* Parse the first factor */
  factor();
  /* As long as the next token is * or /, get the
  next token and parse the next factor */
  while (nextToken == MULT_OP || nextToken == DIV_OP) {
    lex();
    factor();
  }
  if (nextToken == EOF && !isPrinted) {
    printf("Exit <term>\n");
    isPrinted = !isPrinted;
  }
}
/* PURPOSE: Parses a string in the language generated by semantic rules. */
/* RATIONALE: <factor> -> id | int_constant | ( <expr )*/
/* INPUT PARAMETERS: a factor*/
/* OUTPUT PARAMETERS: token val*/
void factor() {
  if (nextToken != EOF)
    printf("Enter <factor>\n");
  /* Determine which RHS */
  if (nextToken == IDENT || nextToken == INT_LIT)
    /* Get the next token */
    lex();
  /* If the RHS is ( <expr> ), call lex to pass over the
  left parenthesis, call expr, and check for the right
  parenthesis */
  else {
    if (nextToken == LEFT_PAREN) {
      lex();
      expr();
      if (nextToken == RIGHT_PAREN) {
        lex();
      }
      /* End of if (nextToken == ... */
      /* It was not an id, an integer literal, or a left
      parenthesis */
      else {
        ;
      }
    }
    if (nextToken == EOF && !isPrinted2) {
      printf("Exit <factor>\n");
      isPrinted2 = !isPrinted2;
    }
  } /* End of else */

} 
/* PURPOSE: lexically analyze an arithmetic expression and parse it. */
/* RATIONALE: <factor> -> id | int_constant | ( <expr )*/
/* INPUT PARAMETERS: an arithmetic expression*/
/* OUTPUT PARAMETERS: a parsed result*/
int lex() {
  lexLen = 0;
  getNonBlank();
  switch (charClass) {
    /* Parse identifiers */
  case LETTER:
    addChar();
    getChar();
    while (charClass == LETTER || charClass == DIGIT) {
      addChar();
      getChar();
    }
    nextToken = IDENT;
    break;
    /* Parse integer literals */
  case DIGIT:
    addChar();
    getChar();
    while (charClass == DIGIT) {
      addChar();
      getChar();
    }
    nextToken = INT_LIT;
    break;
    /* Parentheses and operators */
  case UNKNOWN:
    lookup(nextChar);
    getChar();
    break;
    /* EOF */
  case EOF:
    nextToken = EOF;
    lexeme[0] = 'E';
    lexeme[1] = 'O';
    lexeme[2] = 'F';
    lexeme[3] = 0;
    break;
  } /* End of switch */
  printf("Next token is: %d, Next lexeme is %s\n",
    nextToken, lexeme);
  return nextToken;
} /* End of function lex */
/*****************************************************************/
/* PURPOSE: Print an error message if the program contains an error
*/
/* USED IN: What classes/functions are using this class
*/
/* ALGORITHM: Describe the algorithm for each function
*/
/* DATA STRUCTURES: Describe the main data structures
*/
/*****************************************************************/
void error() {
  printf("error");
}
